name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  ASPEKT_VERSION: '3.0.0'
  NUGET_CERT_REVOCATION_MODE: offline

jobs:
  build:
    name: 'Build & Test'
    runs-on: windows-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion
    
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Configure NuGet
      run: |
        echo "Using NuGet.config for package source configuration"
      env:
        NUGET_CERT_REVOCATION_MODE: offline
        DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          %USERPROFILE%\.nuget\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: |
        dotnet restore Aspekt.sln --verbosity normal
        dotnet restore Aspekt.Bootstrap.Tasks/Aspekt.Bootstrap.Tasks.csproj --verbosity normal
    
    - name: Build solution
      run: dotnet build Aspekt.sln --configuration Release --no-restore
    
    - name: Run unit tests
      run: |
        dotnet test Aspekt.Test/Aspekt.Test.csproj --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
        dotnet test Aspekt.Bootstrap.Test/Aspekt.Bootstrap.Test.csproj --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
        dotnet test Aspekt.Foundation.Test/Aspekt.Foundation.Test.csproj --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
        dotnet test Aspekt.Logging.Test/Aspekt.Logging.Test.csproj --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
    
    - name: Upload test results
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: test-results-${{ matrix.dotnet-version }}
        path: TestResults/*.trx
    
    - name: Create NuGet packages
      if: matrix.dotnet-version == '8.0.x'
      run: |
        echo "üîß Creating NuGet packages for .NET ${{ matrix.dotnet-version }}..."
        dotnet pack Aspekt/Aspekt.csproj --configuration Release --no-build --output nupkgs --verbosity normal
        dotnet pack Aspekt.Contracts/Aspekt.Contracts.csproj --configuration Release --no-build --output nupkgs --verbosity normal
        dotnet pack Aspekt.Logging/Aspekt.Logging.csproj --configuration Release --no-build --output nupkgs --verbosity normal
        
        echo "üì¶ Packages created:"
        Get-ChildItem nupkgs/*.nupkg | ForEach-Object { 
          echo "  - $($_.Name) ($([math]::Round($_.Length/1KB, 2)) KB)"
        }
    
    - name: Upload NuGet packages
      if: matrix.dotnet-version == '8.0.x'
      uses: actions/upload-artifact@v5
      with:
        name: nuget-packages
        path: nupkgs/*.nupkg
        retention-days: 30
    
    - name: Confirm artifact upload
      if: matrix.dotnet-version == '8.0.x'
      run: |
        echo "‚úÖ NuGet packages uploaded as artifact 'nuget-packages'"

  code-quality:
    name: 'Code Quality Analysis'
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore Aspekt.sln
    
    - name: Run code analysis
      run: dotnet build Aspekt.sln --configuration Release --verbosity normal
    
    - name: Check code formatting
      continue-on-error: true
      run: |
        dotnet format Aspekt.sln --verify-no-changes --verbosity diagnostic || echo "Code formatting issues found but continuing..."

  security-scan:
    name: 'Security Scan'
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore Aspekt.sln
    
    - name: Run security audit
      continue-on-error: true
      run: |
        dotnet list package --vulnerable --include-transitive || echo "No vulnerabilities found or command failed - continuing..."

  publish-nuget:
    name: 'Publish to NuGet'
    runs-on: windows-latest
    needs: [build, code-quality, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Download NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: nupkgs
    
    - name: Verify packages exist
      run: |
        if (-not (Test-Path "nupkgs/*.nupkg")) {
          echo "‚ùå No NuGet packages found!"
          exit 1
        }
        $count = (Get-ChildItem nupkgs/*.nupkg).Count
        echo "‚úÖ Found $count NuGet packages to publish"
        Get-ChildItem nupkgs/*.nupkg | ForEach-Object { echo "  - $($_.Name)" }
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Publish to NuGet.org
      run: |
        echo "üì¶ Publishing to NuGet.org..."
        dotnet nuget push "nupkgs/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
    
    - name: Publish to GitHub Packages
      run: |
        echo "üì¶ Publishing to GitHub Packages..."
        dotnet nuget push "nupkgs/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/index.json --skip-duplicate

  publish-github-packages:
    name: 'Publish to GitHub Packages (Pre-release)'
    runs-on: windows-latest
    needs: [build, code-quality]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Download NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: nupkgs
      continue-on-error: true
    
    - name: Debug artifact download
      run: |
        echo "üîç Checking download results..."
        echo "Current directory contents:"
        Get-ChildItem -Force
        echo ""
        echo "nupkgs directory:"
        if (Test-Path "nupkgs") {
          Get-ChildItem nupkgs -Force
        } else {
          echo "‚ùå nupkgs directory does not exist"
        }
    
    - name: Check if packages exist
      id: check-packages
      run: |
        if (Test-Path "nupkgs/*.nupkg") {
          $packages = Get-ChildItem nupkgs/*.nupkg
          $count = $packages.Count
          echo "packages-exist=true" >> $env:GITHUB_OUTPUT
          echo "package-count=$count" >> $env:GITHUB_OUTPUT
          echo "‚úÖ Found $count NuGet packages:"
          $packages | ForEach-Object { echo "  - $($_.Name)" }
        } else {
          echo "packages-exist=false" >> $env:GITHUB_OUTPUT
          echo "package-count=0" >> $env:GITHUB_OUTPUT
          echo "‚ùå No NuGet packages found in nupkgs directory"
        }
    
    - name: Setup .NET
      if: steps.check-packages.outputs.packages-exist == 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Add version suffix for pre-release
      if: steps.check-packages.outputs.packages-exist == 'true'
      run: |
        $timestamp = Get-Date -Format "yyyyMMddHHmmss"
        $sha = "${{ github.sha }}".Substring(0, 7)
        $suffix = "alpha.$timestamp.$sha"
        
        Get-ChildItem nupkgs/*.nupkg | ForEach-Object {
          $newName = $_.Name -replace '\.nupkg$', "-$suffix.nupkg"
          Rename-Item $_.FullName $newName
          echo "Renamed $($_.Name) to $newName"
        }
    
    - name: Publish pre-release to GitHub Packages
      if: steps.check-packages.outputs.packages-exist == 'true'
      run: |
        echo "Publishing ${{ steps.check-packages.outputs.package-count }} packages to GitHub Packages..."
        dotnet nuget push "nupkgs/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/mvpete/index.json --skip-duplicate
    
    - name: No packages to publish
      if: steps.check-packages.outputs.packages-exist == 'false'
      run: |
        echo "‚ö†Ô∏è No NuGet packages found to publish. This may indicate:"
        echo "  - The build job didn't complete successfully"
        echo "  - Package creation was skipped"
        echo "  - Artifact upload failed"
        echo "Check the build job logs for more details."